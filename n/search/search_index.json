{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Eclipse Epsilon \u00b6 Epsilon is a family of languages and tools for code generation, model-to-model transformation, model validation, comparison, migration and refactoring that work out of the box with EMF, UML, Simulink, XML and other types of models. Epsilon is licensed under the Eclipse Public License 2.0 . Installation \u00b6 Download the Eclipse Installer and select Epsilon. Note that you will need a Java Runtime Environment installed on your system. Why Epsilon? \u00b6 One syntax to rule them all: All languages in Epsilon build on top of a common expression language which means that you can reuse code across your model-to-model transformations, code generators, validation constraints etc. Integrated development tools: All languages in Epsilon are supported by editors providing syntax and error highlighting, code templates, and graphical tools for configuring, running, debugging and profiling Epsilon programs. Documentation, Documentation, Documentation: More than 30 articles, 15 screencasts, 20 examples, and a 238-page free e-book are available to help you get from novice to expert.","title":"Home"},{"location":"#eclipse-epsilon","text":"Epsilon is a family of languages and tools for code generation, model-to-model transformation, model validation, comparison, migration and refactoring that work out of the box with EMF, UML, Simulink, XML and other types of models. Epsilon is licensed under the Eclipse Public License 2.0 .","title":"Eclipse Epsilon"},{"location":"#installation","text":"Download the Eclipse Installer and select Epsilon. Note that you will need a Java Runtime Environment installed on your system.","title":"Installation"},{"location":"#why-epsilon","text":"One syntax to rule them all: All languages in Epsilon build on top of a common expression language which means that you can reuse code across your model-to-model transformations, code generators, validation constraints etc. Integrated development tools: All languages in Epsilon are supported by editors providing syntax and error highlighting, code templates, and graphical tools for configuring, running, debugging and profiling Epsilon programs. Documentation, Documentation, Documentation: More than 30 articles, 15 screencasts, 20 examples, and a 238-page free e-book are available to help you get from novice to expert.","title":"Why Epsilon?"},{"location":"doc/","text":"Documentation \u00b6","title":"Documentation"},{"location":"doc/#documentation","text":"","title":"Documentation"},{"location":"doc/egl/","text":"Epsilon Generation Language \u00b6 EGL is a template-based model-to-text language for generating code, documentation and other textual artefacts from models. EGL supports content-destination decoupling, protected regions for mixing generated with hand-written code, and provides a rule-based template coordination language (EGX). Features \u00b6 All the features of the core language of Epsilon Decouple content from destination (can be used to generate text to files, to the clipboard, or as a server-side scripting language etc.) Call templates (with parameters) from other templates Define and call sub-templates Mix generated with hand-written code Coordinate template execution using a rule-based sub-language (EGX)","title":"Model-to-text transformation (EGL)"},{"location":"doc/egl/#epsilon-generation-language","text":"EGL is a template-based model-to-text language for generating code, documentation and other textual artefacts from models. EGL supports content-destination decoupling, protected regions for mixing generated with hand-written code, and provides a rule-based template coordination language (EGX).","title":"Epsilon Generation Language"},{"location":"doc/egl/#features","text":"All the features of the core language of Epsilon Decouple content from destination (can be used to generate text to files, to the clipboard, or as a server-side scripting language etc.) Call templates (with parameters) from other templates Define and call sub-templates Mix generated with hand-written code Coordinate template execution using a rule-based sub-language (EGX)","title":"Features"},{"location":"doc/eol/","text":"Epsilon Object Language \u00b6 EOL is an imperative programming language for creating, querying and modifying EMF models. You can think of it as an amalgamation of JavaScript and OCL, combining the best of both worlds. As such, it provides all the usual imperative features found in Javascript (e.g. statement sequencing, variables, for and while loops, if branches etc.) and all the nice features of OCL such as those handy collection querying functions (e.g. Sequence{1..5}.select(x|x>3) ). These first-order operations are executed in parallel and are short-circuiting where possible (e.g. exists ), so performance is significantly better than OCL. Features \u00b6 Simultaneously access/modify many models of (potentially) different metamodels All the usual programming constructs (while and for loops, statement sequencing, variables etc.) Concise first-order logic OCL operations (select, reject, collect etc.) Ability to create and call methods of Java objects Support for dynamically attaching operations to existing meta-classes and types at runtime Cache the results of expensive operations Extended properties User interaction Create reusable libraries of operations and import them from different Epsilon (not only EOL) modules","title":"Core language (EOL)"},{"location":"doc/eol/#epsilon-object-language","text":"EOL is an imperative programming language for creating, querying and modifying EMF models. You can think of it as an amalgamation of JavaScript and OCL, combining the best of both worlds. As such, it provides all the usual imperative features found in Javascript (e.g. statement sequencing, variables, for and while loops, if branches etc.) and all the nice features of OCL such as those handy collection querying functions (e.g. Sequence{1..5}.select(x|x>3) ). These first-order operations are executed in parallel and are short-circuiting where possible (e.g. exists ), so performance is significantly better than OCL.","title":"Epsilon Object Language"},{"location":"doc/eol/#features","text":"Simultaneously access/modify many models of (potentially) different metamodels All the usual programming constructs (while and for loops, statement sequencing, variables etc.) Concise first-order logic OCL operations (select, reject, collect etc.) Ability to create and call methods of Java objects Support for dynamically attaching operations to existing meta-classes and types at runtime Cache the results of expensive operations Extended properties User interaction Create reusable libraries of operations and import them from different Epsilon (not only EOL) modules","title":"Features"},{"location":"users/","text":"Industry \u00b6 Below is a list of known industrial users of Epsilon (based on bug reports, forum messages, blog posts, tweets and published articles). If you'd like to report additional users of Epsilon in industry or you've spotted any outdated content, please let us know. Sources \u00b6 BAE Systems [ 1 ], NASA [ 1 , 2 , 3 , 4 ], THALES [ 1 , 2 , 3 ], Siemens [ 1 , 2 ], Rolls-Royce [ 1 , 2 , 3 , 4 , 5 ], IBM [ 1 , 2 , 3 , 4 , 5 ], Raytheon [ 1 , 2 ], Atos [ 1 ], Ergon [ 1 ], Talend [ 1 ], Corpus [ 1 ], develop group [ 1 ], DevBoost [ 1 ], Academa [ 1 , 2 , 3 , 4 ], Intelliment [ 1 ], Maiborn Wolff [ 1 , 2 ]","title":"Industry"},{"location":"users/#industry","text":"Below is a list of known industrial users of Epsilon (based on bug reports, forum messages, blog posts, tweets and published articles). If you'd like to report additional users of Epsilon in industry or you've spotted any outdated content, please let us know.","title":"Industry"},{"location":"users/#sources","text":"BAE Systems [ 1 ], NASA [ 1 , 2 , 3 , 4 ], THALES [ 1 , 2 , 3 ], Siemens [ 1 , 2 ], Rolls-Royce [ 1 , 2 , 3 , 4 , 5 ], IBM [ 1 , 2 , 3 , 4 , 5 ], Raytheon [ 1 , 2 ], Atos [ 1 ], Ergon [ 1 ], Talend [ 1 ], Corpus [ 1 ], develop group [ 1 ], DevBoost [ 1 ], Academa [ 1 , 2 , 3 , 4 ], Intelliment [ 1 ], Maiborn Wolff [ 1 , 2 ]","title":"Sources"},{"location":"users/education/","text":"Education \u00b6","title":"Education"},{"location":"users/education/#education","text":"","title":"Education"},{"location":"users/open-source/","text":"Open Source Projects \u00b6","title":"Open-source projects"},{"location":"users/open-source/#open-source-projects","text":"","title":"Open Source Projects"}]}