pre {
	var numProjects = 3;
	var numTasks = 6;
	var numPersons = 5;
	var numEfforts = 9;
	
	var taskNames = Sequence {"Initial Planning", "Requirements Gathering", "Design Phase", "Prototype Development", "Code Implementation", "Unit Testing", "Integration Testing", "System Testing", "User Acceptance Testing", "Deployment Preparation", "Production Deployment", "Post-Deployment Support", "Documentation Writing", "Performance Optimization", "Security Review", "Code Refactoring", "Bug Fixing", "Feature Enhancement", "Client Training", "Project Closure"};
	var personNames = Sequence {"James", "Pedro", "Anek", "Rose", "Maria", "Liam", "Olivia", "Noah", "Emma", "Ava", "Elijah", "Sophia", "Isabella", "Mia", "Lucas", "Amelia", "Ethan", "Harper", "Mason", "Evelyn"};
}

$instances numProjects
@list projects
operation Project create() {
	self.title = "P_" + nextString("LETTER_UPPER", 4);
}

$instances numTasks
@list tasks
operation Task create() {
	self.title = nextFromCollection(taskNames);
	self.start = nextInteger(6);
	self.duration = nextInteger(6);
	nextFromList("projects").tasks.add(self);
}

$instances numPersons
@list persons
operation Person create() {
	self.name = nextFromCollection(personNames);
	
	// To ensure that every project is participated by
	// at least one person, distribute persons among
	// projects without people before doing it randomly
	var firstProjectWithoutPeople = Project.all().select(p | p.people.isEmpty()).first;
	if (firstProjectWithoutPeople.isDefined()) {
		firstProjectWithoutPeople.people.add(self);
	} else {
		nextFromList("projects").people.add(self);
	}
}

$instances numEfforts
operation Effort create() {
	self.percentage = 20 * nextInteger(1, 6); // 20, 40, ..., 100

	// To ensure that every task has at least one effort
	// assigned to it, distribute efforts among
	// tasks without efforts before doing it randomly
	var task = null;
	var firstFreeTask = Task.all().select(s | s.effort.isEmpty()).first;
	if (firstFreeTask.isDefined()) {
		firstFreeTask.effort.add(self);
		task = firstFreeTask;
	} else {
		task = nextFromList("tasks");
		task.effort.add(self);
	}
	
	// If possible, assign the effort to a person working
	// on the same project as the effort and task
	var project = Project.all().selectOne(p | p.tasks.includes(task));
	if (not project.people.isEmpty()) {
		self.person = nextFromCollection(project.people);
	}
}


// The previous operations generate redundant efforts.
// This happens when a person participates in a task
// via two or more efforts. To solve this, we replace
// these efforts by a single one with joint percentages
pattern CompactEfforts 
pr : Project,
t : Task
    from: pr.tasks,
p : Person
    from: t.effort.person
guard: t.effort.size() >= 2 {
	onmatch {
		var participatedEfforts = t.effort.select(e | e.person == p);
		var jointEffortsPercentage = participatedEfforts.percentage.sum();

		// Delete all existing efforts and
		// create a new one with the joint percentage
		for (e in participatedEfforts) {
			delete e;
		}
		
		var e : new Effort;
		e.person = p;
		e.percentage = jointEffortsPercentage;
		if (e.percentage > 100) {
			e.percentage = 100;
		}
		t.effort.add(e);
	}
}